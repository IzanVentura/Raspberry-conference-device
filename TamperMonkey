// ==UserScript==
// @name         Autoacciones por URL
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  Se une automaticamente a las llamadas
// @author       Izan
// @match        *://meet.google.com/*
// @match        *://app.zoom.us/*
// @match        *://zoom.us/*
// @match        *://teams.live.com/*
// @match        *://meet.jit.si/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    /*** === Registro de acciones por URL === ***/
    const accionesPorURL = [
        {
            match: url => url.hostname === 'meet.google.com',
            action: autoUnirseMeet
        },
        {
            match: url => url.hostname === 'app.zoom.us',
            action: autoUnirseZoom
        },
        {
            match: url => url.hostname === 'teams.live.com',
            action: autoUnirseTeams
        },
        {
            match: url => url.hostname === 'meet.jit.si',
            action: autoUnirseJitsi
        },
    ];

    /*** === Atajos de teclado === ***/
    window.addEventListener('keydown', function(event) {
        // Shift+S: cerrar pestaña
        if (event.shiftKey && event.key.toLowerCase() === 's') {
            const url = window.location;
            if (url.hostname === 'meet.google.com') {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonSalir = botones.find(b => {
                    const label = b.getAttribute('aria-label')?.toLowerCase();
                    return label && (label.includes('salir de la llamada') || label.includes('exit the call'));
                });
                const cerrar = confirm("¿Quieres salir de la llamada?");
                if (cerrar) {
                    if (botonSalir) {
                        console.log('Click en botonSalir');
                        botonSalir.click();
                    }
                    setTimeout(() => {
                        window.close();
                    }, 1000);
                }
            } else if (url.hostname === 'app.zoom.us') {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonSalir1 = botones.find(b => {
                    const label = b.getAttribute('aria-label')?.toLowerCase();
                    return label && (label.includes('fin') || label.includes('leave'));
                });
                const cerrar = confirm("¿Quieres salir de la llamada?");
                if (cerrar) {
                    if (botonSalir1) {
                        console.log('Click en botonSalir1');
                        botonSalir1.click();
                    } else {
                        const botonSalirInicio = document.querySelector('button.leave-btn');
                        if (botonSalirInicio) {
                            console.log('Click en botonSalirInicio');
                            botonSalirInicio.click();
                        }
                        setTimeout(() => {
                            window.close();
                        }, 1500);
                    }
                    setTimeout(() => {
                        const botonSalir2 = Array.from(document.querySelectorAll('button')).find(b =>
                            ['salir de la reunión', 'leave meeting'].includes(b.textContent.trim().toLowerCase())
                        );
                        if (botonSalir2) {
                            console.log('Click en botonSalir2 (después de aparecer)');
                            botonSalir2.click();
                        }}, 600);
                    setTimeout(() => {
                            window.close();
                        }, 1500);
                }
            } else if (url.hostname === 'zoom.us') {
                window.close();
            } else {
                const cerrar = confirm("¿Quieres salir de la llamada?");
                if (cerrar) {
                    window.close();
                }
            };
        }

        // Shift+M: acción personalizada por plataforma
        if (event.shiftKey && event.key.toLowerCase() === 'm') {
            const url = window.location;

            if (url.hostname === 'meet.google.com') {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonMicro = botones.find(b => {
                    const label = b.getAttribute('aria-label')?.toLowerCase();
                    return label && (label.includes('activar micrófono') || label.includes('silenciar micrófono') ||
                                    label.includes('mute microphone') || label.includes('unmute microphone'));
                });
                if (botonMicro) {
                    botonMicro.click();
                    console.log('Botón "Microfono" pulsado (Meet)');
                } else {
                    console.log('Botón "Microfono" no encontrado (Meet)');
                }
            } else if (url.hostname === 'app.zoom.us') {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonMicro = botones.find(b => {
                    const label = b.getAttribute('aria-label')?.toLowerCase();
                    return label && (label.includes('mute my microphone') || label.includes('unmute my microphone'));
                });
                if (botonMicro) {
                    botonMicro.click();
                    console.log('Botón "Microfono" pulsado (Zoom)');
                    if (botonMicro) {
                        botonMicro.blur();
                    }
                } else {
                    console.log('Botón "Microfono" no encontrado (Zoom)');
                }
            } else if (url.hostname === 'teams.live.com') {
                const botonMicro = document.querySelector('button[data-inp="microphone-button"]');
                if (botonMicro) {
                    botonMicro.click();
                    console.log('Botón "Microfono" pulsado (Teams)');
                } else {
                    console.log('Botón "Microfono" no encontrado (Teams)');
                }
            } else if (url.hostname === 'meet.jit.si') {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonMicro = botones.find(b => ['activar micrófono', 'silenciar micrófono', 'mute microphone', 'unmute microphone'].includes(b.textContent.trim().toLowerCase()));
                if (botonMicro) {
                    botonMicro.click();
                    console.log('Botón "Microfono" pulsado (Meet)');
                } else {
                    console.log('Botón "Microfono" no encontrado (Meet)');
                }
            } else {
                console.log('Shift+M pulsado, pero URL no reconocida');
            }
        }
    });


    /*** === Funciones de acción === ***/
    function autoUnirseMeet() {
        window.addEventListener('load', () => {
            setTimeout(() => {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonUnirme = botones.find(b => ['unirme ahora', 'solicitar unirse', 'join now', 'request to join'].includes(b.textContent.trim().toLowerCase()));
                if (botonUnirme) {
                    botonUnirme.focus();
                    console.log('Botón "Unirme ahora" enfocado (Meet)');
                } else {
                    console.log('Botón "Unirme ahora" no encontrado (Meet)');
                }
            }, 3000);
        });
    }

    function autoUnirseZoom() {
        window.addEventListener('load', () => {
            setTimeout(() => {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonUnirme = botones.find(b => ['unirse', 'join'].includes(b.textContent.trim().toLowerCase()));
                if (botonUnirme) {
                    botonUnirme.focus();
                    console.log('Botón "Unirse" enfocado (Zoom)');
                } else {
                    console.log('Botón "Unirse" no encontrado (Zoom)');
                }
            }, 3000);
        });
    }

    function autoUnirseTeams() {
        window.addEventListener('load', () => {
            setTimeout(() => {
                const botones = Array.from(document.querySelectorAll('button'));
                const botonUnirme = botones.find(b => ['unirse ahora', 'join now'].includes(b.textContent.trim().toLowerCase()));
                if (botonUnirme) {
                    botonUnirme.focus();
                    console.log('Botón "Unirse ahora" enfocado (Teams)');
                } else {
                    console.log('Botón "Unirse ahora" no encontrado (Teams)');
                }
            }, 12000);
            setTimeout(() => {
                const botonMicro = document.querySelector('button[data-inp="microphone-button"]');
                if (botonMicro) {
                    botonMicro.blur();
                }
            }, 40000);
        });
    }

    function autoUnirseJitsi() {
        window.addEventListener('load', () => {
            setTimeout(() => {
                const botones = Array.from(document.querySelectorAll('[data-testid="prejoin.joinMeeting"]'));
                const botonUnirme = botones.find(b => ['entrar a la reunión', 'join meeting'].includes(b.textContent.trim().toLowerCase()));
                if (botonUnirme) {
                    botonUnirme.focus();
                    console.log('Botón "Unirme ahora" enfocado (Jitsi)');
                } else {
                    console.log('Botón "Unirme ahora" no encontado (Jitsi)');
                }
            }, 3000);
        });
    }
    
    /*** === Router principal === ***/
    const urlActual = window.location;

    for (const { match, action } of accionesPorURL) {
        try {
            if (match(urlActual)) {
                console.log(`Ejecutando acción para ${urlActual.hostname}`);
                action();
                break;
            }
        } catch (err) {
            console.error('Error en evaluación de ruta:', err);
        }
    }
})();
